
LIL’ BUG v0.4

A set of 6502 tools for the 5 KB ‘unexpanded’ PAL-1
hobby microcomputer kit designed by Liu Ganning
Collected, ported, or written by Dave Hassler, 2022
This documentation for version 0.4 of LIL' BUG
License info at the end of this document.

CREDITS FOR ORIGINAL FILES
eWOZ Monitor Lite
	Original Apple I monitor (the “WozMon”) by Steve Wozniak, 1976.
	Original eWOZ Monitor for Apple I/Replica I by F. Safstrom 2007.
	PAL-1/KIM-1 version eWOZ by Jim B. McClanahan, 2021.
6502 Disassembler
	By Steve Wozniak and Allen Baum, 1976.
SEARCH
	Original routine by Jeff Tranter, 2012 (derived from JMON).
MOVIT
	By Lew Edwards, 1977 (from “The First Book of KIM”).
LIL’ FILL
	Adapted by Dave Hassler. Originally from “6502 Software Gourmet Guide & Cookbook”; code retrieved from 
	www.6502.org/source/general/clearmem.htm
LIL’ MEM DUMP, REGISTER PRINT, and the LIL’ BUG Menu/Picker
	By Dave Hassler, 2022.

INTRODUCTION
	This suite of tools will provide the “unexpanded” PAL-1 (or microKIM) user who uses a video display with some added utility over the standard, one-byte resolution KIM-1 monitor.  I sometimes have to remind myself that the KIM-1 was never meant to be a “home computer” like its descendant, my beloved VIC-20 from teenage years.  The KIM-1 was designed to be a “trainer,” to allow engineers a chance to take the brand new 6502 microprocessor out for a test drive.
	But then, computer nerds have always loved a hacking challenge!  I’ve had a lot of fun and learned a lot about computer design, operation, and machine language since I built Liu’s PAL-1 kit.  I hope these tools can help other users of 5K machines make some fun investigations.

	A NOTE: These tools/modules, while they work great, are a) not “user friendly” and b) not foolproof.  Not using them in the manner described below will break them, necessitating a reload of the package/module, at least.  Modules should have parameters set up *before* they are run; the starting address required of a module must be lower than the ending address; if the program says “Enter a number less than 12”, don’t try to enter 16.  Etc.  There are no checks for errors, no backspacing (except in eWozLite), no do-overs.   As noted in the Search section description: “No niceties = tiny size -- the responsibility is all on you.”  If it breaks, clear all the status flags (#$00 in $F1) and try again; this cures a multitude of ills before running a lot of programs, anyway.
	And *please* feel free to hack this, fix it, augment it, change it, move it, etc, etc! 
	
DESCRIPTIONS and USAGE
   eWozLite Monitor (Start: $1220)
	The only changes I made to eWOZ, as modified by Jim McClanahan for PAL-1 from Safstrom’s original reworking, were stripping out the Intel Hex loading code, relocating the input buffer to the *top* of the program, and putting the whole thing at the top of RAM.  That freed up almost 700 contiguous bytes. For assembling 6502 code, I use the online 6502 assembler by Masswerk at:  https://www.masswerk.at/6502/assembler.html
and it outputs perfect Apple I-format hex files by default (along with many other options for Commodore, Atari, and BBC 8-bit machines), so I don't need the Intel hex loading part (although, that's always available in Jim's port).
	eWozLite starts at $1220, with the buffer starting at $1380.  To use it, just type a ‘G’ at its starting address, or call it from the menu.  All you get is a backslash to let you know it’s running. It behaves almost exactly the way it does in its original form, but with the backspace key functioning “normally.”  To perform a hex memory dump, the “dot” command format is: <start-addr>.<end-addr>   To alter memory, use the colon command:  <addr>: xx xx xx …   To use eWozLite as an Apple I hex loader from a serial terminal, set the comms parameters in the serial terminal to at least a 5 msec character delay, and no less than 200 msec line delay.  This allows the software (and hardware) time to process each line of hex code.  Your serial interface may require different (likely longer) delays.  Then, while in eWozLite, upload the file to the PAL-1 with an ASCII transfer.
	To execute a program, append an ‘R’ to the starting address: e.g., 0F60R<ret>.
	eWozLite calls executable code with a JSR instruction instead of a JMP, so if your program ends with an RTS, it’ll come back to eWozLite (another one of the changes made by F.S.). That’s it.

   6502 Disassembler (Start: $1010)
	There is a PDF scan of the original 1976 Dr. Dobb’s Journal article written by Wozniak and Baum included, describing the theory, use, and modification of their disassembler, with commented source code.  It’s an education, let me tell you!  All I did to get it to work on the PAL-1 was tack on some of Jim’s “save the registers” printing code to the end, and call that instead of the native Apple I ROM addresses.  I also changed the "starting address" zero page locations to line up with the rest of LIL' BUG, and I changed some of the ASCII output in the data tables (stripped bit 7) to reflect the KIM-1’s character set. 
	Full instructions are in the PDF.  But for a quick “how-to”, here’s what you do: place the starting address of the code you want to disassemble in zero page locations $D0 and $D1, little-endian.  Then, enter the starting address of the disassembler and type ‘G’, or call it from the LIL’ BUG menu.  You’ll get 20 lines of disassembly.  To get the next chunk, just select [D] again from the menu without altering $D0 and $D1 - they were updated as the program disassembled memory.
	I suggest running the disassembler from within eWozLite: it’s a lot more convenient, especially if you’re going to jump around in memory or alter more than a byte or two.  Inside eWozLite, type: D0: xx xx <ret>,  where the xx xx is the starting address (little endian, again), then type ‘1010R’ <ret>.   Once it outputs, you only have to type ‘R’ <ret> to get the next page of assembly, or you can easily enter a new starting address and start the disassembler again without leaving the monitor. Type 'B00R' to return to the LIL' BUG menu.
	Be aware that the disassembler can become “confused” if it tries to parse out long data tables; it likes code, not data.  I’ve seen some odd things output when that happens…

   MOVIT (v2 - called 'Copy Mem.' on menu) (Start: $0F10)
	From page 127 of “The First Book of KIM,” this is a workhorse.  As Lew Edwards wrote in 1977, “This one moves anything anywhere!”  Anywhere you’ve got RAM to write it, that is, likely $0000 to $13FF, then from $2000 to $9FFF, although some may have RAM going all the way to $DFFF.  See Lew’s commented source code in the book for details of operation.  Briefly: 
	Before running this, enter the starting address of the code to move into $D0 and $D1 (little endian).  The address of the end of the code to move -- PLUS 1 -- goes into $D2 and $D3.  Finally, put the target address into $D4 and $D5.  Then, set the PAL-1 address to $0F10 and hit ‘G’ to make the magic happen.  Or run it from the menu at $0B00, or from within eWozLite – your choice.
	I added a little press-a-key routine before actual execution, because this is a “destructive” program; if the right values are not set beforehand, one could unintentionally write over needed data that was not yet saved.  I also added a little "OK" message, to let the user know that things went through.  Last, I added Lew's suggestion (in FBOK) to have the program show the last address written (PC) if you exit out of LIL' BUG to the KIM monitor.

   LIL’ FILL (Start: $0E50)
	To the original code, I added the press-a-key routine, because this is also a “destructive” program.  I also changed the zero page locations to match the other programs in this suite, and the user can select a custom hex value (not just $00) for the fill.  Last, I added a little "OK" message to this one, too.
	To use it, enter the start address for the fill in $D0 and $D1, and put the single hex byte fill value in $D2.  Then, let ’er rip, and you'll have 256 memory locations filled with the byte of your choice.
	This could be expanded to fill more than a single page at a time, and to accept a string of bytes, as well, but I’ll leave that up to you.	

   LIL’ MEM DUMP (Start: $0D60)
	Not counting the obligatory “Hello World!” program, this was my second go at writing an assembly language program.  I learned a lot: indirect addressing, 16-bit math, printing from a table, etc.  It does what it says it does: it outputs a page-worth of memory, but with both hex digit and ASCII characters, something the eWozLite monitor can’t do (or, not without hacking in a patch).
	To use it, enter the starting address in locations $D0 and $D1, little-endian.  Then, run the main menu and select ‘M’.  Or, type ‘0D60’ <spacebar> and type ‘G’.  You’ll get a page of memory dump.  To get the next chunk/page, just hit 'M' from the menu.  To change the dump start, exit out, put the new location in $D0 and $D1, and run directly or via the menu.

   REGISTER PRINT (Start $0CFD)
	Yep, it prints the 6502 registers.  That’s it.  The main utility in this is to have the BRK interrupt vector point to the start of this program, so you can see what’s going on with the registers and the stack pointer when something you’re working on breaks.  Store $FD and $0C in $17FE and $17FF, respectively.  Or, to use it directly, just call it or select it from the menu.  My very first little assembly language program.

   SEARCH (Start: $0BFC)
	This is a derived adaptation of the search module in JMON by Jeff Tranter.  I stripped this module down to the barest bones, preserving Jeff's excellent matching code and label/variable nomenclature while changing the addresses and length of the search 'string', which is now *hex bytes only* (no ASCII).  As is, it stands alone without any of the supporting routines in JMON, and takes up 2 bytes less than a page of memory.
	It also must be "set up" prior to a run, much like almost everything else in LIL' BUG. This kept the size of the module waaay down. No niceties = tiny size -- the responsibility is all on you, bub! :^)
	Only 'strings' of up to 11 bytes may be searched for, but that gives about four contiguous instructions to look for, and that should be useful.  If one needs longer search strings, maybe commandeeer the bottom of the stack for the IN buffer, say from $0100-$0140?
	To use it, place the starting and ending addresses of the search (little endian) into $D0/D1 and $D2/D3, respectively.  Then put the number of characters in your hex search sequence in $D4, and the sequence itself into $D5 through $DF (same part of zero page as Lew’s MOVIT).  E.g., I want to search for every occurrence of ‘JSR $1EA0’ in my program, which runs from $0200 to $08DB.  I’ll enter (in eWozLite): D0: 00 02 DB 08 03 20 A0 1E <ret>.  Then, I can run the search directly with 0BFCR, or pop out to the KIM monitor, set the address to $0BFC and type ‘G’, or I can run the menu program at $0B00 and then choose the [S]earch option.
	Sometimes, Search just breaks, especially if it’s called and hasn’t been set up beforehand.  To resolve this, simply hit RS on the PAL-1 keypad, then <ret> on the serial terminal emulator keyboard.  Adjust $D0-$DF, as necessary, then run again from its start address or the menu.

   LIL’ BUG MENU (Starts $0B00)
	This is the start of the whole package and lets you choose which program to run.  Most of the parts have some sort of reminder about required memory locations to fill, but the disassembler does not, so the info (for the starting addresses, at least) is also on the menu.  If you haven’t set up, or forgot to, or something, just hit ‘X’ and pop back out to the KIM monitor, enter your parameters, and head back to the menu, or directly to the module in question.  Or do that same stuff from within eWozLite.  I had fun making it, and learned about jump tables and the basic parsing of user input.  And, I like saying "Boo!" to myself, everytime I call it from the KIM monitor or eWozLite.  :^)

COMMENTS
	Mainly, I just hope someone else finds these tools useful.
	After putting together a PAL-1 computer kit in the summer of ’22, I started collecting some debugging tools from various places on the internet.  Most packages were too large to fit into my stock 5 KB PAL-1 (my attempt at building a hand-wired 32K RAM card from scratch was only partly successful and not reliable), and attempts at hacking away at the source code of these larger packages were generally not fruitful, although educational.  And, I had hoped to eventually make my PAL-1 “stand-a-lone” – not tethered to a modern PC – as it would have been in the late ’70s, and that meant thinking small.
	What I needed were some serious old-school tools, tools designed with 4K microcomputers in mind.  The programs in “The First Book of KIM” are great: MOVIT, BRANCH, and RELOCATE are especially useful, but for anything bigger/better for 6502, I decided to look for 4K Apple I programs and, secondarily, early PET 2001 and unexpanded VIC-20 tools.  Now, finally, I was onto something…
	The Woz Mon is an obvious choice for improvement, as it allows memory examination/modification at scale, rather than a byte at a time.  What it didn’t have was an ASCII dump component, so I wrote one – my second attempt at 6502 assembly language (Hello World is always first, and waaay back in the day I was 'BASIC-only' on my VIC-20).  Studying Jim McClanahan’s code regarding register preservation and echo suppression for the PAL-1 helped a lot, as did the many resources on Hans Otten’s amazing retro computing website.  But I would have had it a lot tougher without Richard Mansfield’s “Machine Language for Beginners” book.  Worth its weight in gold, in my opinion, especially if you grew up with BASIC.
	Some of the tools in LIL’ BUG are generally simple, even “rustic,” one might say.  Of course, there’s nothing simple about Woz and Baum’s code – sheer genius, and I still don’t understand half of what they did; I’m just glad they did, and that I could port it to work on the PAL-1.  For all the other tools, I borrowed the ethos of Baum and Woz regarding input: set up your parameters *before* running the program.  This helped keep the size down, for one thing, although I certainly poured over Jeff Tranter’s JMON code for how he did user input.  And I also thought about the very-most useful tools in his suite.
	I wanted the ability to import Apple I-format hex files, disassemble them, write a series of bytes, move chunks of memory around, relocate it (for the most part – with tools like these, manual editing is guaranteed), fill up space with a repeating byte (usually 00), and see what was going on with my registers when my home-grown programs inevitably broke (I wanted to add a single stepper that disassembled, but that was above my pay grade; maybe after I learn more about interrupts, though).
	And I wanted to do it all in less than 2.5K, half what my machine had.
	Hence, this collection, built around the Woz Mon, for the most part.  I find that using the disassembler is easier if I call it from inside eWozLite.  LIL’ BUG sits from $0B00 to $13FF, leaving 2.25K for code, starting at $0200: the traditional start of programs in the original KIM-1.  Further, this package is almost the same size as Robert Ford Denison’s two-pass “2K Symbolic Assembler for the 6502”, written originally for a KIM-1 expanded to 4KB (you can find it and full documentation on Jeff Tranter’s github pages).  Well, the PAL-1 has 5K onboard, and while the operation is a little tricky when compared to modern editors and assemblers, anyone familiar with Peter Jennings’ microADE will be right at home quickly.  And unlike microADE, 2KSA fits into the ‘unexpanded’ PAL-1 – just relocate it to $0C00.  There you go: a complete, standalone suite of tools to explore programming and the 6502… and have some fun, as well.
	All of the parts of LIL’ BUG are available in standalone modules, too -- see my github PAL-1 respository for the bits and pieces, including source code.  One way to reclaim a full 1K of user RAM is to only load the disassembler (at $1010) and eWozLite (at $1220).  Another way to get back 400 bytes or so would be to strip out the printing routines of all-but one module, and call that from within all the other modules.  And almost everything can be easily relocated to suit one’s needs (the disassembler took a little ‘manual massaging’…).  FWIW, Jim Butterfield’s RELOCATE or HYPERTAPE often sits in Page 1 in my computer, too.
	WARNING: most of these programs use Zero Page from $30 through $48, and $D0 through $E2.  Consider that friendly advice for examining and modifying your own programs.  :^)  Source code is also available for all the modules, so feel free to rework whatever you want (see License below).  These ports and original programs are not perfect, but they’re a start, and hopefully useful as-is.
	As Liu says, “Happy Hacking!”

LICENSE
The software elements herein written by David H. Hassler are presented under The MIT License.
LIL’ BUG MENU, REGISTER PRINT, and LIL’ MEM DUMP are copyright © 2022 David H. Hassler
This documentation and license notice should accompany the software.
See https://mit-license.org/ for details.
